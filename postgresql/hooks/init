#!/bin/sh

exec 2>&1

mkdir -p "{{pkg.svc_config_path}}/env"

export PGPASSFILE="{{pkg.svc_config_path}}/.pgpass"
chmod 0600 {{pkg.svc_config_path}}/.pgpass

write_env_var() {
  echo "$1" > "{{pkg.svc_config_path}}/env/$2"
}

{{ #if cfg.wal-e.enable }}
{{ #with cfg.wal-e.aws }}
write_env_var 's3://{{bucket}}/{{../../../svc.service}}-{{../../../svc.group}}' 'WALE_S3_PREFIX'
write_env_var '{{access_key_id}}' 'AWS_ACCESS_KEY_ID'
write_env_var '{{secret_access_key}}' 'AWS_SECRET_ACCESS_KEY'
write_env_var '{{region}}' 'AWS_REGION'
{{/with}}

write_env_var '{{cfg.superuser.name}}' 'PGUSER'
write_env_var '{{cfg.superuser.password}}' 'PGPASSWORD'
write_env_var 'postgres' 'PGDATABASE'
{{ /if }}

chown -R hab:hab {{pkg.svc_var_path}}
chown -R hab:hab {{pkg.svc_config_path}}
chown -R hab:hab {{pkg.svc_data_path}}

{{#unless svc.me.follower ~}}
if [[ ! -f "{{pkg.svc_data_path}}/PG_VERSION" ]]; then
  echo " Database does not exist, creating with 'initdb'"
  chpst -U hab:hab -u hab:hab \
    initdb -U {{cfg.superuser.name}} \
    -E utf8 \
    -D {{pkg.svc_data_path}} \
    --pwfile {{pkg.svc_config_path}}/pwfile \
    --locale POSIX
fi
{{~/unless}}
{{#if svc.me.follower ~}}
psql -U {{cfg.superuser.password}}  -h {{svc.leader.sys.ip}} -p {{cfg.port}} postgres >/dev/null 2>&1 << EOF
DO \$$
BEGIN
  PERFORM * FROM pg_authid WHERE rolname = '{{cfg.replication.name}}';
    IF FOUND THEN
        ALTER ROLE "{{cfg.replication.name}}" WITH REPLICATION LOGIN PASSWORD '{{cfg.replication.password}}';
    ELSE
        CREATE ROLE "{{cfg.replication.name}}" WITH REPLICATION LOGIN PASSWORD '{{cfg.replication.password}}';
    END IF;
END;
\$$
EOF

if [ $? != 0 ]; then
  echo 'Waiting for leader to become available before initializing'
  exit 1
fi

echo 'Bootstrapping from leader'

rm -rf {{pkg.svc_data_path}}/*
pg_basebackup --pgdata={{pkg.svc_data_path}} --xlog-method=stream --dbname='postgres://{{cfg.replication.name}}@{{svc.leader.sys.ip}}:{{cfg.port}}/postgres'
{{~/if}}

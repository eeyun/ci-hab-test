#!/bin/sh

exec 2>&1

source {{pkg.svc_config_path}}/functions.sh

write_wale_env

chown -R hab:hab {{pkg.svc_var_path}}
chown -R hab:hab {{pkg.svc_config_path}}
chown -R hab:hab {{pkg.svc_data_path}}

{{#unless svc.me.follower ~}}
if [[ ! -f "{{pkg.svc_data_path}}/PG_VERSION" ]]; then
  echo " Database does not exist, creating with 'initdb'"
  chpst -U hab:hab -u hab:hab \
    initdb -U {{cfg.superuser.name}} \
    -E utf8 \
    -D {{pkg.svc_data_path}} \
    --pwfile {{pkg.svc_config_path}}/pwfile \
    --locale POSIX
fi
{{~/unless}}
{{#if svc.me.follower ~}}
PGPASSWORD={{cfg.superuser.name}} psql -U {{cfg.superuser.password}}  -h {{svc.leader.sys.ip}} -p {{cfg.port}} postgres >/dev/null 2>&1 << EOF
DO \$$
BEGIN
  PERFORM * FROM pg_authid WHERE rolname = '{{cfg.replication.name}}';
    IF FOUND THEN
        ALTER ROLE "{{cfg.replication.name}}" WITH REPLICATION LOGIN PASSWORD '{{cfg.replication.password}}';
    ELSE
        CREATE ROLE "{{cfg.replication.name}}" WITH REPLICATION LOGIN PASSWORD '{{cfg.replication.password}}';
    END IF;
END;
\$$
EOF

if [ $? != 0 ]; then
  echo 'Waiting for leader to become available before initializing'
  exit 1
fi

echo 'Bootstrapping from leader'

rm -rf {{pkg.svc_data_path}}/*
PGPASSWORD={{cfg.replication.password}} pg_basebackup --pgdata={{pkg.svc_data_path}} --xlog-method=stream --dbname='postgres://{{cfg.replication.name}}@{{svc.leader.sys.ip}}:{{cfg.port}}/postgres'
{{~/if}}
